#!/usr/bin/env node 

const request = require('request');
const nacl = require('tweetnacl')
const sodium = require('tweetsodium')
const nodeFetch = require('node-fetch');



function getRepoPublicKey(repo_name){
	var opts = {
		url: 'https://api.github.com/repos/shubham-agarwal-27/'+repo_name+'/actions/secrets/public-key',
		headers: {
			'User-Agent': 'request',
			Authorization: `Bearer ${TOKEN}`
		}
	};

  	return new Promise(function(resolve, reject) {
    	request(opts, function(error, response, body){
			resolve(JSON.parse(response['body']));
			console.log(response['statusCode']);
		});
  	});
}


async function CreateNewSecret(repo_name, secret_name, secret_value){
	try {
		let secretKey = await getRepoPublicKey(repo_name);
		// console.log(secretKey);
		const key = secretKey['key'];
		const value = secret_value;

		// Convert the message and key to Uint8Array's (Buffer implements that interface)
		const messageBytes = Buffer.from(value);
		const keyBytes = Buffer.from(key, 'base64');

		const encryptedBytes = sodium.seal(messageBytes, keyBytes);
		const encrypted = Buffer.from(encryptedBytes).toString('base64');

		const body = {
			message: "Adding secret",
			committer: {
				name: "shubham-agarwal-27",
				email: "f20170126@goa.bits-pilani.ac.in"
			},
			encrypted_value: encrypted,
			key_id: secretKey['key_id']
		};

		nodeFetch('https://api.github.com/repos/shubham-agarwal-27/React_Coursera_Confusion/actions/secrets/'+secret_name,{
			json: true,
			method: "put",
			body: JSON.stringify(body),
			headers: {
				"Content-type": "application/json",
				Authorization: `Bearer ${TOKEN}`
			}
		})
		.then(res => res.json())
		.then(json => {
			console.log();
			console.log(json);
		})
		.catch(err => console.error(err));
		
	}
	catch(error) {
		console.log("error in getting secrets request : " + error);
	}
}

function getRepoSecrets(repo_name){
	var opts = {
		url: 'https://api.github.com/repos/shubham-agarwal-27/'+repo_name+'/actions/secrets',
		headers: {
			'User-Agent': 'request',
			Authorization: `Bearer ${TOKEN}`
		}
	};

  	return new Promise(function(resolve, reject) {
    	request(opts, function(error, response, body){
			resolve(JSON.parse(response['body'])['secrets']);
			console.log(response['statusCode']);
		});
  	});
}

async function printRepoSecrets(repo_name){
	var repo_secrets = await getRepoSecrets(repo_name);
	console.log(repo_secrets);
}

(async function () {
	// await CreateNewSecret('React_Coursera_Confusion', 'THIRD_SECRET', 'My third name');
	await printRepoSecrets('React_Coursera_Confusion');
})();